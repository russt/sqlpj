#
#sqlcolumn.defs -  definitions for sqlcolumn object.
#

#allows us to run stand-alone:
%ifndef CG_ROOT %include build_setup.defs

{ ## header section
PL_PACKAGE = $SQLCOLUMN_PACKAGE
PL_PACKAGE_DESCRIPTION = manage metadata for a single column of an sql table

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

PL_PKG_IMPORTS := << EOF
EOF
#%evalmacro PL_PKG_IMPORTS PL_PKG_IMPORTS

PL_PKG_ATTRIBUTES := << EOF
EOF
#%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}

{ ## constructor section
PL_CONSTRUCTOR_BODY := << EOF
my ($tblname, $cname, $ctype, $csize, $cnullable, $cdefault, $decimalDigits) = @_;
EOF
#%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << EOF
'mTableName'        => $tblname,
'mColumnName'       => $cname,
'mColumnType'       => $ctype,
'mColumnSize'       => $csize,
'mColumnIsNullable' => $cnullable,
'mColumnDefault'    => $cdefault,
'mDecimalDigits'    => $decimalDigits,
EOF
#%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << EOF
#printf STDERR "%s:  constructing column object for table '%s', column '%s'\n", $pkgname, $self->tableName(), $self->columnName();
EOF
#%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

{ ## class methods

#clear standard accessor accumulator:
getset_methods =

#generate read/write (get/set) accessors:
#PL_ATTRIBUTE_NAME = XX
#%evalmacro >> getset_methods pl_getsetlist

#generate read-only attributes:
PL_ATTRIBUTE_NAME = TableName
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = ColumnName
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = ColumnType
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = ColumnSize
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = ColumnIsNullable
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = ColumnDefault
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = DecimalDigits
%evalmacro >> getset_methods pl_attr_method

PL_PKG_METHODS := << EOF

sub columnCreateAttributes
#return string with additional create attributes for a column
{
    my ($self) = @_;

    #DEFAULT is only current attribute.
    return "" unless (defined($self->columnDefault()) && $self->columnDefault() ne "");

    #if numerical value, then don't quote the value:
    if ($self->columnType() =~ /(int|decimal)/i ) {
        return sprintf(" DEFAULT %s", $self->columnDefault())
    } else {
        return sprintf(" DEFAULT '%s'", $self->columnDefault())
    }
}

sub qcolumnName
#return quoted column name
#TODO look up quote char in metadata.
{
    my ($self) = @_;

    return( "`" . $self->columnName() . "`" );
}

sub columnCreateType
#return string for type name needed for the create table statement
{
    my ($self) = @_;

    my ($ctype) = $self->columnType();
    $ctype =~ tr/[a-z]/[A-Z]/;

    if ($ctype =~ /(TEXT|TIME)/ ) {
        #length is implied for certain data types:
        return sprintf("%s", $ctype);
    } elsif ($ctype =~ /DECIMAL/ ) {
        return sprintf("%s(%s, %s)", $ctype, $self->columnSize(), $self->decimalDigits());
    } else {
        return sprintf("%s(%s)", $ctype, $self->columnSize());
    }
}

{=getset_methods=}
EOF

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}


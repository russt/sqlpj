#
#sqltable.defs -  definitions for sqltable object.
#

#allows us to run stand-alone:
%ifndef CG_ROOT %include ../build_setup.defs

{ ## header section
PL_PACKAGE = $SQLTABLE_PACKAGE
PL_PACKAGE_DESCRIPTION = manange metadata for a single sql table

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

PL_PKG_IMPORTS := << EOF
use JDBC;
use Inline::Java qw(caught);
use {=SQLCOLUMN_PACKAGE=};
use {=SQLINDEX_PACKAGE=};
use {=SQLINDEXKEY_PACKAGE=};
EOF
%evalmacro PL_PKG_IMPORTS PL_PKG_IMPORTS

PL_PKG_ATTRIBUTES := << EOF
EOF
#%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}

{ ## constructor section
PL_CONSTRUCTOR_BODY := << EOF
my ($jdbc_metadata, $dbname, $tblname) = @_;
EOF
#%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << EOF
'mMetaData'     => $jdbc_metadata,
'mDatabaseName' => $dbname,
'mTableName'    => $tblname,
'mColumnsByName' => {},             #hash - column objects keyed by column name
'mAllColumns'    => [],             #array - list of column objects
'mColumnNames'   => [],             #array - list of column names
'mAllIndices'    => [],             #array - list of indices for this table
'mIndexNames'    => [],             #array - list of index names
EOF
#%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << EOF
#printf STDERR "%s:  constructing table object for '%s'\n", $pkgname, $self->tableName();
$self->setTableAttributes();
EOF
%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

{ ## class methods

#clear standard accessor accumulator:
getset_methods =

#generate read/write (get/set) accessors:
#PL_ATTRIBUTE_NAME = XX
#%evalmacro >> getset_methods pl_getsetlist

#generate read-only attributes:
PL_ATTRIBUTE_NAME = MetaData
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = DatabaseName
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = TableName
%evalmacro >> getset_methods pl_attr_method

#lists:
PL_ATTRIBUTE_NAME = AllColumns
%evalmacro >> getset_methods pl_attrlist_method
PL_ATTRIBUTE_NAME = ColumnNames
%evalmacro >> getset_methods pl_attrlist_method
PL_ATTRIBUTE_NAME = AllIndices
%evalmacro >> getset_methods pl_attrlist_method
PL_ATTRIBUTE_NAME = IndexNames
%evalmacro >> getset_methods pl_attrlist_method

PL_PKG_METHODS := << EOF

sub columnsByName
#return mColumnsByName list
{
    my ($self, $cname) = @_;

    return $self->{'mColumnsByName'}->{$cname};
}

sub addIndex
#add an sql index to the list of indicies associated with this table
{
    my ($self, $idx) = @_;

    push @{$self->{'mAllIndices'}}, $idx;
    push @{$self->{'mIndexNames'}}, $idx->name();
}

sub setTableAttributes
#initialize column attributes for our table.
{
    my ($self) = @_;

    my $dbMetaData = $self->metaData();
    my $dbname = $self->databaseName();
    my $tblname = $self->tableName();
    my $str = "";

#printf STDERR "setTableAttributes: tblname='%s' dbname='%s'\n", $tblname, $dbname;

    eval {
        my $rset = undef;
        my %autoIncrementColumns = ();

        ######
        #DUMMY select to get information about columns
        ######
        my $con = $dbMetaData->getConnection();
        my $stmt = $con->createStatement();
        my $sqlbuf = sprintf("select * from %s where 1 = 2", $tblname);
        if ($stmt->execute($sqlbuf)) {
            $rset      = $stmt->getResultSet();
            my $m      = $rset->getMetaData();
            my $colcnt = $m->getColumnCount();

            for (my $ii = 1; $ii <= $colcnt; $ii++) {
                my $cname = $m->getColumnLabel($ii);
#printf STDERR "%s[%s]:isAutoIncrement(%d)=%d\n", $tblname, $cname, $ii, $m->isAutoIncrement($ii);
                $autoIncrementColumns{$cname} = $m->isAutoIncrement($ii);
            }
        } else {
            printf STDERR "%s[setTableAttributes]:  cannot exec DUMMY query on %s\n", $pkgname, $tblname;
        }

        #######
        #column info
        #######
#'getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern)'  => 'ResultSet',
        $rset = $dbMetaData->getColumns($dbname, "%", $tblname, "%");

        #######
        # table atributes:
        # TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME,
        # DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH,
        # DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS,
        # COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH,
        # ORDINAL_POSITION, IS_NULLABLE
        #######

        #for each entry, allocate a new column object:
        while ($rset->next()) {
            #note - you have to do the fetch first, which sets wasNull() for the current column.
            $str = $rset->getString("COLUMN_NAME"); $str = $rset->wasNull() ? undef : $str;
            my $cname = $str;

            $str = $rset->getString("TYPE_NAME"); $str = $rset->wasNull() ? undef : $str;
            my $ctype = $str;

            $str = $rset->getString("COLUMN_SIZE"); $str = $rset->wasNull() ? undef : $str;
            my $csize = $str;

            $str = $rset->getString("NULLABLE"); $str = $rset->wasNull() ? undef : $str;
            #my $cnullable = ($str eq "0")? 0 : 1;
            my $cnullable = $str;

            $str = $rset->getString("COLUMN_DEF"); $str = $rset->wasNull() ? undef : $str;
            my $cdefault = $str;

            $str = $rset->getString("DECIMAL_DIGITS"); $str = $rset->wasNull() ? undef  : $str;
            my $decimalDigits = $str;

            #######
            #create new column object:
            #######
            $self->{'mColumnsByName'}->{$cname} =
                new {=SQLCOLUMN_PACKAGE=}(
                    $tblname, $cname, $ctype, $csize, $cnullable, $cdefault, $decimalDigits,
                    $autoIncrementColumns{$cname}
                );

            #push column name & reference to column object:
            push @{$self->{'mColumnNames'}}, $cname;
            push @{$self->{'mAllColumns'}}, $self->{'mColumnsByName'}->{$cname};
        }

        ########
        #primary keys:
        # TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, KEY_SEQ, PK_NAME
        ########
#'getPrimaryKeys(String catalog, String schema, String table)'  => 'ResultSet',
        #$rsetb = $dbMetaData->getPrimaryKeys($dbname, "%", $tblname);

        #########
        #Indicies
        # TABLE_CAT, TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, INDEX_QUALIFIER,
        # INDEX_NAME, TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC,
        # CARDINALITY, PAGES, FILTER_CONDITION
        #########
#'getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)'  => 'ResultSet',
        my $lastIndexName = "";
        my $indexName = "";
        my $cname = "";

        my $idxobj = undef;
        my $keyobj = undef;
        my $isPrimary = 0;
        my $isUnique  = 0;

        $rset = $dbMetaData->getIndexInfo($dbname, "%", $tblname, 0, 0);
        while ($rset->next()) {

            #note - we should never get a null index:
            $str = $rset->getString("INDEX_NAME"); $str = $rset->wasNull() ? undef : $str;
            $indexName = $str;

            $str = $rset->getString("COLUMN_NAME"); $str = $rset->wasNull() ? undef : $str;
            $cname = $str;

            $str = $rset->getString("NON_UNIQUE"); $str = $rset->wasNull() ? undef : $str;
            $isUnique = ($str =~ /true/i)? 0 : 1;

            if ($lastIndexName eq $indexName) {
#printf "%s: CONTINUE OLD RECORD lastIndexName=%s indexName=%s cname=%s\n", $tblname, $lastIndexName, $indexName, $cname;
                $keyobj = new {=SQLINDEXKEY_PACKAGE=} ($indexName, $cname, $self->columnsByName($cname));
                #push key on index:
                $idxobj->addKey($keyobj);
            } else {

                if ($lastIndexName eq "" ){
#printf "\n%s: FIRST ITERATION: SKIP CLOSE lastIndexName=%s indexName=%s cname=%s\n", $tblname, $lastIndexName, $indexName, $cname;
                } else {
#printf "%s: CLOSE OLD RECORD lastIndexName=%s indexName=%s cname=%s\n", $tblname, $lastIndexName, $indexName, $cname;
#$idxobj->showIndex();
                }

                #create new record:
                $isPrimary = ($indexName eq "PRIMARY")? 1 : 0;

#printf "%s: CREATE NEW RECORD lastIndexName=%s indexName=%s cname=%s isPrimary=%d isUnique=%d\n", $tblname, $lastIndexName, $indexName, $cname, $isPrimary, $isUnique;

                $idxobj = new {=SQLINDEX_PACKAGE=} ($tblname, $indexName, $isPrimary, $isUnique);
                #push index on table:
                $self->addIndex($idxobj);

                $keyobj = new {=SQLINDEXKEY_PACKAGE=} ($indexName, $cname, $self->columnsByName($cname));
                #push key on index:
                $idxobj->addKey($keyobj);
            }

            $lastIndexName = $indexName;
        }

        #if we entered the loop, then we need to close the last record:
        if ($lastIndexName ne "" ) {
#printf "%s: CLOSE OLD RECORD lastIndexName=%s indexName=%s cname=%s\n", $tblname, $lastIndexName, $indexName, $cname;
#$idxobj->showIndex();
        }
    };

    if ($@) {
        if (caught("java.sql.SQLException")){
            my $msg = $@->getMessage() ;
            printf STDERR "%s[setTableAttributes]:  Java exception: '%s'\n", $pkgname, $msg;
        } else {
            printf STDERR "%s[setTableAttributes]:  ERROR: '%s'\n",$pkgname, $@;
        }
        return;
    }
}

sub showCreateSql
{
    my ($self) = @_;

    my $db = $self->databaseName();
    my $tbl = $self->tableName();

#### SOI
    printf <<"!", $db, $tbl, $db, $tbl;
DROP TABLE IF EXISTS `%s`.`%s`;
CREATE TABLE `%s`.`%s` (
!
#### EOI

    my @lines = ();
    for my $col ($self->allColumns()) {
        push @lines, sprintf("    %s %s %s%s",
            $col->qcolumnName(),
            $col->columnCreateType(),
            $col->columnIsNullable() ? "NULL" : "NOT NULL",
            $col->columnCreateAttributes(),
            );
    }

    #generate index creates:
    for my $idx ($self->allIndices()) {
        push @lines, sprintf("    %s", $idx->indexCreateStr());
    }

    #ouput lines:
    printf "%s\n", join(",\n", @lines);

#### SOI
    print <<"!";
);

!
#### EOI

}

{=getset_methods=}

EOF

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}

#    DROP TABLE IF EXISTS `inftest`.`branch`;
#    CREATE TABLE `inftest`.`branch` (
#      `branchid` BIGINT(11) NOT NULL auto_increment,
#      `reposid` BIGINT(10) NOT NULL DEFAULT 0,
#      `name` VARCHAR(50) NULL,
#      `cvsbranchname` VARCHAR(50) NULL,
#      `noticerelease` VARCHAR(5) NOT NULL DEFAULT '0',
#      `resistance` VARCHAR(5) NULL,
#      `activeflag` VARCHAR(5) NULL,
#      `createdby` VARCHAR(11) NULL,
#      `createdate` DATETIME NULL,
#      `updatedby` VARCHAR(11) NULL,
#      `updatedate` DATETIME NULL,
#      `productid` BIGINT(10) NULL,
#      `status` VARCHAR(50) NULL,
#      `status_url` VARCHAR(100) NULL,
#      `show_in_in` VARCHAR(2) NULL,
#      INDEX `branch_idx` (`branchid`, `productid`, `reposid`, `name`(50)),
#      UNIQUE INDEX `branch_unq_idx` (`productid`, `reposid`, `name`(50))
#    ) ENGINE = INNODB;
    

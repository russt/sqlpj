#
#sqltables.defs -  definitions for sqltables object.
#

#allows us to run stand-alone:
%ifdef BUILD_SETUP_COMPLETE %include build_setup.defs

{ ## header section
PL_PACKAGE = $SQLTABLES_PACKAGE
PL_PACKAGE_DESCRIPTION = manange sql table metadata

#not a base class - use standard constuctor name:
PL_CONSTRUCTOR_NAME = new

{
PL_EXTERN_PKG_IMPORTS =
PL_PKG_IMPORTS = << EOF
use $_SQLTABLE_PACKAGE;
EOF
%if    $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS
%ifnot $GEN_ONE_MODULE   PL_PKG_IMPORTS = $PL_EXTERN_PKG_IMPORTS$PL_PKG_IMPORTS
}

PL_PKG_ATTRIBUTES := << EOF
EOF
#%evalmacro PL_PKG_ATTRIBUTES PL_PKG_ATTRIBUTES
}

{ ## constructor section
PL_CONSTRUCTOR_BODY := << EOF
my ($jdbc_metadata, $dbname) = @_;
EOF
#%evalmacro PL_CONSTRUCTOR_BODY PL_CONSTRUCTOR_BODY

PL_OBJ_ATTRIBUTES := << EOF
'mMetaData'     => $jdbc_metadata,
'mDatabaseName' => $dbname,
'mTablesByName' => {},             #hash - table objects keyed by table name
'mAllTables'    => [],             #array - list of table objects
'mTableNames'   => [],             #array - list of table names
EOF
#%evalmacro PL_OBJ_ATTRIBUTES PL_OBJ_ATTRIBUTES

#this is for further initialzation of attributes, since hash init cannot be self-referential:
PL_POST_ATTRIBUTE_INIT := << EOF
#printf STDERR "%s:  constructing tables collection object\n", $pkgname;
@{$self->{'mTableNames'}} = &retrieveTableNames($self->metaData(), $self->databaseName());

for my $tblname ($self->tableNames()) {
    #set tables information from jdbc metaData:
    $self->{'mTablesByName'}->{$tblname} = new {=_SQLTABLE_PACKAGE=}($self->metaData(), $self->databaseName(), $tblname);
}

@{$self->{'mAllTables'}} = values %{$self->{'mTablesByName'}};
EOF
%evalmacro PL_POST_ATTRIBUTE_INIT PL_POST_ATTRIBUTE_INIT
}

{ ## class methods

#clear standard accessor accumulator:
getset_methods =

#generate read/write (get/set) accessors:
#PL_ATTRIBUTE_NAME = XX
#%evalmacro >> getset_methods pl_getsetlist

#generate read-only attributes:
#list attributes:
#this is the list of table objects:
PL_ATTRIBUTE_NAME = AllTables
%evalmacro >> getset_methods pl_attrlist_method
#this is the list of table names:
PL_ATTRIBUTE_NAME = TableNames
%evalmacro >> getset_methods pl_attrlist_method
#scalars attributes:
PL_ATTRIBUTE_NAME = MetaData
%evalmacro >> getset_methods pl_attr_method
PL_ATTRIBUTE_NAME = DatabaseName
%evalmacro >> getset_methods pl_attr_method

PL_PKG_METHODS := << EOF
sub tableByName
#lookup table object in tables hash.
{
    my ($self, $tblname) = @_;

    return $self->{'mTablesByName'}->{$tblname};
}

{=$getset_methods:rtrim=}

#######
#static methods
#######

sub retrieveTableNames
#retrieve the table names and return as a list..
{
    my ($dbMetaData, $dbname) = @_;

#names of tables columns for mysql:
#       "TABLE_CAT",
#       "TABLE_SCHEM",
#       "TABLE_NAME",
#       "TABLE_TYPE",
#       "REMARKS",

    my @table_names = ();

    eval {
        my $rset = $dbMetaData->getTables($dbname, "%", "%", []);

        #for each entry, save the table name only:
        while ($rset->next()) {
            #note - you have to do the fetch first, which sets wasNull() for the current column.
            my $str = $rset->getString("TABLE_NAME");
            $str = $rset->wasNull() ? "(null)" : $str;

            push @table_names, $str;
        }
    };

    if ($@) {
        if (&Inline::Java::caught("java.sql.SQLException")){
            my $msg = $@->getMessage() ;
            printf STDERR "%s[retrieveTableNames]:  Java exception: '%s'\n", $pkgname, $msg;
        } else {
            printf STDERR "%s[retrieveTableNames]:  ERROR: '%s'\n",$pkgname, $@;
        }
        return ();
    }

#printf STDERR "retrieveTableNames: table_names=(%s)\n", join(",", @table_names);
    return @table_names;
}
EOF

%evalmacro PL_PKG_METHODS PL_PKG_METHODS
}

